// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLittlePetAPI.Data;

#nullable disable

namespace MyLittlePetAPI.Migrations
{
    [DbContext(typeof(MyLittlePetDbContext))]
    [Migration("20250611175541_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyLittlePetAPI.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementID"));

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("AchievementID");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.CareActivity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityID");

                    b.ToTable("CareActivities");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.CareHistory", b =>
                {
                    b.Property<int>("CareHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareHistoryID"));

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPetID")
                        .HasColumnType("int");

                    b.HasKey("CareHistoryID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("PlayerPetID");

                    b.ToTable("CareHistories");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.GameRecord", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("MinigameID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("PlayerID", "MinigameID");

                    b.HasIndex("MinigameID");

                    b.ToTable("GameRecords");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Minigame", b =>
                {
                    b.Property<int>("MinigameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MinigameID"));

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MinigameID");

                    b.ToTable("Minigames");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Pet", b =>
                {
                    b.Property<int>("PetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetID"));

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PetID");

                    b.HasIndex("AdminID");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerAchievement", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("AchievementID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EarnedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerID", "AchievementID");

                    b.HasIndex("AchievementID");

                    b.ToTable("PlayerAchievements");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerInventory", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("ShopProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PlayerID", "ShopProductID");

                    b.HasIndex("ShopProductID");

                    b.ToTable("PlayerInventories");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerPet", b =>
                {
                    b.Property<int>("PlayerPetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerPetID"));

                    b.Property<DateTime>("AdoptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastStatusUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PetID")
                        .HasColumnType("int");

                    b.Property<string>("PetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlayerPetID");

                    b.HasIndex("PetID");

                    b.HasIndex("PlayerID", "PetName")
                        .IsUnique()
                        .HasFilter("[PetName] IS NOT NULL");

                    b.ToTable("PlayerPets");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Shop", b =>
                {
                    b.Property<int>("ShopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ShopID");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.ShopProduct", b =>
                {
                    b.Property<int>("ShopProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopProductID"));

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("ShopID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ShopProductID");

                    b.HasIndex("AdminID");

                    b.HasIndex("ShopID");

                    b.ToTable("ShopProducts");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Coin")
                        .HasColumnType("int");

                    b.Property<int>("Diamond")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gem")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.CareHistory", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.CareActivity", "CareActivity")
                        .WithMany("CareHistories")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.User", "Player")
                        .WithMany("CareHistories")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.PlayerPet", "PlayerPet")
                        .WithMany("CareHistories")
                        .HasForeignKey("PlayerPetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CareActivity");

                    b.Navigation("Player");

                    b.Navigation("PlayerPet");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.GameRecord", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.Minigame", "Minigame")
                        .WithMany("GameRecords")
                        .HasForeignKey("MinigameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.User", "Player")
                        .WithMany("GameRecords")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Minigame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Pet", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.User", "Admin")
                        .WithMany("Pets")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerAchievement", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.Achievement", "Achievement")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("AchievementID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.User", "Player")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerInventory", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.User", "Player")
                        .WithMany("PlayerInventories")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.ShopProduct", "ShopProduct")
                        .WithMany("PlayerInventories")
                        .HasForeignKey("ShopProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ShopProduct");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerPet", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.Pet", "Pet")
                        .WithMany("PlayerPets")
                        .HasForeignKey("PetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.User", "Player")
                        .WithMany("PlayerPets")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.ShopProduct", b =>
                {
                    b.HasOne("MyLittlePetAPI.Models.User", "Admin")
                        .WithMany("ShopProducts")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyLittlePetAPI.Models.Shop", "Shop")
                        .WithMany("ShopProducts")
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Achievement", b =>
                {
                    b.Navigation("PlayerAchievements");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.CareActivity", b =>
                {
                    b.Navigation("CareHistories");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Minigame", b =>
                {
                    b.Navigation("GameRecords");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Pet", b =>
                {
                    b.Navigation("PlayerPets");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.PlayerPet", b =>
                {
                    b.Navigation("CareHistories");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.Shop", b =>
                {
                    b.Navigation("ShopProducts");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.ShopProduct", b =>
                {
                    b.Navigation("PlayerInventories");
                });

            modelBuilder.Entity("MyLittlePetAPI.Models.User", b =>
                {
                    b.Navigation("CareHistories");

                    b.Navigation("GameRecords");

                    b.Navigation("Pets");

                    b.Navigation("PlayerAchievements");

                    b.Navigation("PlayerInventories");

                    b.Navigation("PlayerPets");

                    b.Navigation("ShopProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
